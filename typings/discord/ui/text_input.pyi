"""
This type stub file was generated by pyright.
"""

from typing import Literal, Optional, TYPE_CHECKING, Tuple, TypeVar
from ..components import TextInput as TextInputComponent
from ..enums import ComponentType, TextStyle
from .item import Item
from typing_extensions import Self
from ..types.components import TextInput as TextInputPayload

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""
if TYPE_CHECKING:
    ...
__all__ = ('TextInput', )
V = TypeVar('V', bound='View', covariant=True)
class TextInput(Item[V]):
    """Represents a UI text input.

    .. container:: operations

        .. describe:: str(x)

            Returns the value of the text input or an empty string if the value is ``None``.

    .. versionadded:: 2.0

    Parameters
    ------------
    label: :class:`str`
        The label to display above the text input.
    custom_id: :class:`str`
        The ID of the text input that gets received during an interaction.
        If not given then one is generated for you.
    style: :class:`discord.TextStyle`
        The style of the text input.
    placeholder: Optional[:class:`str`]
        The placeholder text to display when the text input is empty.
    default: Optional[:class:`str`]
        The default value of the text input.
    required: :class:`bool`
        Whether the text input is required.
    min_length: Optional[:class:`int`]
        The minimum length of the text input.
    max_length: Optional[:class:`int`]
        The maximum length of the text input.
    row: Optional[:class:`int`]
        The relative row this text input belongs to. A Discord component can only have 5
        rows. By default, items are arranged automatically into those 5 rows. If you'd
        like to control the relative positioning of the row then passing an index is advised.
        For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
        ordering. The row number must be between 0 and 4 (i.e. zero indexed).
    """
    __item_repr_attributes__: Tuple[str, ...] = ...
    def __init__(self, *, label: str, style: TextStyle = ..., custom_id: str = ..., placeholder: Optional[str] = ..., default: Optional[str] = ..., required: bool = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., row: Optional[int] = ...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    @property
    def custom_id(self) -> str:
        """:class:`str`: The ID of the text input that gets received during an interaction."""
        ...
    
    @custom_id.setter
    def custom_id(self, value: str) -> None:
        ...
    
    @property
    def width(self) -> int:
        ...
    
    @property
    def value(self) -> Optional[str]:
        """Optional[:class:`str`]: The value of the text input."""
        ...
    
    @property
    def label(self) -> str:
        """:class:`str`: The label of the text input."""
        ...
    
    @label.setter
    def label(self, value: str) -> None:
        ...
    
    @property
    def placeholder(self) -> Optional[str]:
        """:class:`str`: The placeholder text to display when the text input is empty."""
        ...
    
    @placeholder.setter
    def placeholder(self, value: Optional[str]) -> None:
        ...
    
    @property
    def required(self) -> bool:
        """:class:`bool`: Whether the text input is required."""
        ...
    
    @required.setter
    def required(self, value: bool) -> None:
        ...
    
    @property
    def min_length(self) -> Optional[int]:
        """:class:`int`: The minimum length of the text input."""
        ...
    
    @min_length.setter
    def min_length(self, value: Optional[int]) -> None:
        ...
    
    @property
    def max_length(self) -> Optional[int]:
        """:class:`int`: The maximum length of the text input."""
        ...
    
    @max_length.setter
    def max_length(self, value: Optional[int]) -> None:
        ...
    
    @property
    def style(self) -> TextStyle:
        """:class:`discord.TextStyle`: The style of the text input."""
        ...
    
    @style.setter
    def style(self, value: TextStyle) -> None:
        ...
    
    @property
    def default(self) -> Optional[str]:
        """:class:`str`: The default value of the text input."""
        ...
    
    @default.setter
    def default(self, value: Optional[str]) -> None:
        ...
    
    def to_component_dict(self) -> TextInputPayload:
        ...
    
    @classmethod
    def from_component(cls, component: TextInputComponent) -> Self:
        ...
    
    @property
    def type(self) -> Literal[ComponentType.text_input]:
        ...
    
    def is_dispatchable(self) -> bool:
        ...
    



"""
This type stub file was generated by pyright.
"""

from typing import Any, ClassVar, Dict, Iterator, List, Mapping, Optional, TYPE_CHECKING, Tuple, Type, TypeVar
from typing_extensions import Self
from enum import Enum

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""
__all__ = ('Enum', 'ChannelType', 'MessageType', 'SpeakingState', 'VerificationLevel', 'ContentFilter', 'Status', 'DefaultAvatar', 'AuditLogAction', 'AuditLogActionCategory', 'UserFlags', 'ActivityType', 'NotificationLevel', 'TeamMembershipState', 'WebhookType', 'ExpireBehaviour', 'ExpireBehavior', 'StickerType', 'StickerFormatType', 'InviteTarget', 'VideoQualityMode', 'ComponentType', 'ButtonStyle', 'TextStyle', 'PrivacyLevel', 'InteractionType', 'InteractionResponseType', 'NSFWLevel', 'MFALevel', 'Locale', 'EntityType', 'EventStatus', 'AppCommandType', 'AppCommandOptionType')
if TYPE_CHECKING:
    ...
class EnumMeta(type):
    if TYPE_CHECKING:
        __name__: ClassVar[str]
        _enum_member_names_: ClassVar[List[str]]
        _enum_member_map_: ClassVar[Dict[str, Any]]
        _enum_value_map_: ClassVar[Dict[Any, Any]]
        ...
    def __new__(cls, name: str, bases: Tuple[type, ...], attrs: Dict[str, Any], *, comparable: bool = ...) -> Self:
        ...
    
    def __iter__(cls) -> Iterator[Any]:
        ...
    
    def __reversed__(cls) -> Iterator[Any]:
        ...
    
    def __len__(cls) -> int:
        ...
    
    def __repr__(cls) -> str:
        ...
    
    @property
    def __members__(cls) -> Mapping[str, Any]:
        ...
    
    def __call__(cls, value: str) -> Any:
        ...
    
    def __getitem__(cls, key: str) -> Any:
        ...
    
    def __setattr__(cls, name: str, value: Any) -> None:
        ...
    
    def __delattr__(cls, attr: str) -> None:
        ...
    
    def __instancecheck__(self, instance: Any) -> bool:
        ...
    


if TYPE_CHECKING:
    ...
else:
    ...
class ChannelType(Enum):
    text = ...
    private = ...
    voice = ...
    group = ...
    category = ...
    news = ...
    news_thread = ...
    public_thread = ...
    private_thread = ...
    stage_voice = ...
    forum = ...
    def __str__(self) -> str:
        ...
    


class MessageType(Enum):
    default = ...
    recipient_add = ...
    recipient_remove = ...
    call = ...
    channel_name_change = ...
    channel_icon_change = ...
    pins_add = ...
    new_member = ...
    premium_guild_subscription = ...
    premium_guild_tier_1 = ...
    premium_guild_tier_2 = ...
    premium_guild_tier_3 = ...
    channel_follow_add = ...
    guild_stream = ...
    guild_discovery_disqualified = ...
    guild_discovery_requalified = ...
    guild_discovery_grace_period_initial_warning = ...
    guild_discovery_grace_period_final_warning = ...
    thread_created = ...
    reply = ...
    chat_input_command = ...
    thread_starter_message = ...
    guild_invite_reminder = ...
    context_menu_command = ...


class SpeakingState(Enum):
    none = ...
    voice = ...
    soundshare = ...
    priority = ...
    def __str__(self) -> str:
        ...
    
    def __int__(self) -> int:
        ...
    


class VerificationLevel(Enum, comparable=True):
    none = ...
    low = ...
    medium = ...
    high = ...
    highest = ...
    def __str__(self) -> str:
        ...
    


class ContentFilter(Enum, comparable=True):
    disabled = ...
    no_role = ...
    all_members = ...
    def __str__(self) -> str:
        ...
    


class Status(Enum):
    online = ...
    offline = ...
    idle = ...
    dnd = ...
    do_not_disturb = ...
    invisible = ...
    def __str__(self) -> str:
        ...
    


class DefaultAvatar(Enum):
    blurple = ...
    grey = ...
    gray = ...
    green = ...
    orange = ...
    red = ...
    def __str__(self) -> str:
        ...
    


class NotificationLevel(Enum, comparable=True):
    all_messages = ...
    only_mentions = ...


class AuditLogActionCategory(Enum):
    create = ...
    delete = ...
    update = ...


class AuditLogAction(Enum):
    guild_update = ...
    channel_create = ...
    channel_update = ...
    channel_delete = ...
    overwrite_create = ...
    overwrite_update = ...
    overwrite_delete = ...
    kick = ...
    member_prune = ...
    ban = ...
    unban = ...
    member_update = ...
    member_role_update = ...
    member_move = ...
    member_disconnect = ...
    bot_add = ...
    role_create = ...
    role_update = ...
    role_delete = ...
    invite_create = ...
    invite_update = ...
    invite_delete = ...
    webhook_create = ...
    webhook_update = ...
    webhook_delete = ...
    emoji_create = ...
    emoji_update = ...
    emoji_delete = ...
    message_delete = ...
    message_bulk_delete = ...
    message_pin = ...
    message_unpin = ...
    integration_create = ...
    integration_update = ...
    integration_delete = ...
    stage_instance_create = ...
    stage_instance_update = ...
    stage_instance_delete = ...
    sticker_create = ...
    sticker_update = ...
    sticker_delete = ...
    scheduled_event_create = ...
    scheduled_event_update = ...
    scheduled_event_delete = ...
    thread_create = ...
    thread_update = ...
    thread_delete = ...
    app_command_permission_update = ...
    @property
    def category(self) -> Optional[AuditLogActionCategory]:
        ...
    
    @property
    def target_type(self) -> Optional[str]:
        ...
    


class UserFlags(Enum):
    staff = ...
    partner = ...
    hypesquad = ...
    bug_hunter = ...
    mfa_sms = ...
    premium_promo_dismissed = ...
    hypesquad_bravery = ...
    hypesquad_brilliance = ...
    hypesquad_balance = ...
    early_supporter = ...
    team_user = ...
    system = ...
    has_unread_urgent_messages = ...
    bug_hunter_level_2 = ...
    verified_bot = ...
    verified_bot_developer = ...
    discord_certified_moderator = ...
    bot_http_interactions = ...
    spammer = ...


class ActivityType(Enum):
    unknown = ...
    playing = ...
    streaming = ...
    listening = ...
    watching = ...
    custom = ...
    competing = ...
    def __int__(self) -> int:
        ...
    


class TeamMembershipState(Enum):
    invited = ...
    accepted = ...


class WebhookType(Enum):
    incoming = ...
    channel_follower = ...
    application = ...


class ExpireBehaviour(Enum):
    remove_role = ...
    kick = ...


ExpireBehavior = ExpireBehaviour
class StickerType(Enum):
    standard = ...
    guild = ...


class StickerFormatType(Enum):
    png = ...
    apng = ...
    lottie = ...
    @property
    def file_extension(self) -> str:
        ...
    


class InviteTarget(Enum):
    unknown = ...
    stream = ...
    embedded_application = ...


class InteractionType(Enum):
    ping = ...
    application_command = ...
    component = ...
    autocomplete = ...
    modal_submit = ...


class InteractionResponseType(Enum):
    pong = ...
    channel_message = ...
    deferred_channel_message = ...
    deferred_message_update = ...
    message_update = ...
    autocomplete_result = ...
    modal = ...


class VideoQualityMode(Enum):
    auto = ...
    full = ...
    def __int__(self) -> int:
        ...
    


class ComponentType(Enum):
    action_row = ...
    button = ...
    select = ...
    text_input = ...
    def __int__(self) -> int:
        ...
    


class ButtonStyle(Enum):
    primary = ...
    secondary = ...
    success = ...
    danger = ...
    link = ...
    blurple = ...
    grey = ...
    gray = ...
    green = ...
    red = ...
    url = ...
    def __int__(self) -> int:
        ...
    


class TextStyle(Enum):
    short = ...
    paragraph = ...
    long = ...
    def __int__(self) -> int:
        ...
    


class PrivacyLevel(Enum):
    guild_only = ...


class NSFWLevel(Enum, comparable=True):
    default = ...
    explicit = ...
    safe = ...
    age_restricted = ...


class MFALevel(Enum, comparable=True):
    disabled = ...
    require_2fa = ...


class Locale(Enum):
    american_english = ...
    british_english = ...
    bulgarian = ...
    chinese = ...
    taiwan_chinese = ...
    croatian = ...
    czech = ...
    danish = ...
    dutch = ...
    finnish = ...
    french = ...
    german = ...
    greek = ...
    hindi = ...
    hungarian = ...
    italian = ...
    japanese = ...
    korean = ...
    lithuanian = ...
    norwegian = ...
    polish = ...
    brazil_portuguese = ...
    romanian = ...
    russian = ...
    spain_spanish = ...
    swedish = ...
    thai = ...
    turkish = ...
    ukrainian = ...
    vietnamese = ...
    def __str__(self) -> str:
        ...
    


E = TypeVar('E', bound='Enum')
class EntityType(Enum):
    stage_instance = ...
    voice = ...
    external = ...


class EventStatus(Enum):
    scheduled = ...
    active = ...
    completed = ...
    canceled = ...
    ended = ...
    cancelled = ...


class AppCommandOptionType(Enum):
    subcommand = ...
    subcommand_group = ...
    string = ...
    integer = ...
    boolean = ...
    user = ...
    channel = ...
    role = ...
    mentionable = ...
    number = ...
    attachment = ...


class AppCommandType(Enum):
    chat_input = ...
    user = ...
    message = ...


def create_unknown_value(cls: Type[E], val: Any) -> E:
    ...

def try_enum(cls: Type[E], val: Any) -> E:
    """A function that tries to turn the value into enum ``cls``.

    If it fails it returns a proxy invalid value instead.
    """
    ...


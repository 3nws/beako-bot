"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Optional, TYPE_CHECKING
from discord.enums import Enum
from discord.app_commands import Cooldown as Cooldown
from typing_extensions import Self
from ...message import Message

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""
if TYPE_CHECKING:
    ...
__all__ = ('BucketType', 'Cooldown', 'CooldownMapping', 'DynamicCooldownMapping', 'MaxConcurrency')
class BucketType(Enum):
    default = ...
    user = ...
    guild = ...
    channel = ...
    member = ...
    category = ...
    role = ...
    def get_key(self, msg: Message) -> Any:
        ...
    
    def __call__(self, msg: Message) -> Any:
        ...
    


class CooldownMapping:
    def __init__(self, original: Optional[Cooldown], type: Callable[[Message], Any]) -> None:
        ...
    
    def copy(self) -> CooldownMapping:
        ...
    
    @property
    def valid(self) -> bool:
        ...
    
    @property
    def type(self) -> Callable[[Message], Any]:
        ...
    
    @classmethod
    def from_cooldown(cls, rate: float, per: float, type: Callable[[Message], Any]) -> Self:
        ...
    
    def create_bucket(self, message: Message) -> Cooldown:
        ...
    
    def get_bucket(self, message: Message, current: Optional[float] = ...) -> Optional[Cooldown]:
        ...
    
    def update_rate_limit(self, message: Message, current: Optional[float] = ..., tokens: int = ...) -> Optional[float]:
        ...
    


class DynamicCooldownMapping(CooldownMapping):
    def __init__(self, factory: Callable[[Message], Optional[Cooldown]], type: Callable[[Message], Any]) -> None:
        ...
    
    def copy(self) -> DynamicCooldownMapping:
        ...
    
    @property
    def valid(self) -> bool:
        ...
    
    def create_bucket(self, message: Message) -> Optional[Cooldown]:
        ...
    


class _Semaphore:
    """This class is a version of a semaphore.

    If you're wondering why asyncio.Semaphore isn't being used,
    it's because it doesn't expose the internal value. This internal
    value is necessary because I need to support both `wait=True` and
    `wait=False`.

    An asyncio.Queue could have been used to do this as well -- but it is
    not as inefficient since internally that uses two queues and is a bit
    overkill for what is basically a counter.
    """
    __slots__ = ...
    def __init__(self, number: int) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def locked(self) -> bool:
        ...
    
    def is_active(self) -> bool:
        ...
    
    def wake_up(self) -> None:
        ...
    
    async def acquire(self, *, wait: bool = ...) -> bool:
        ...
    
    def release(self) -> None:
        ...
    


class MaxConcurrency:
    __slots__ = ...
    def __init__(self, number: int, *, per: BucketType, wait: bool) -> None:
        ...
    
    def copy(self) -> Self:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def get_key(self, message: Message) -> Any:
        ...
    
    async def acquire(self, message: Message) -> None:
        ...
    
    async def release(self, message: Message) -> None:
        ...
    



"""
This type stub file was generated by pyright.
"""

import inspect
from typing import Any, Literal, Optional, OrderedDict, Protocol, TYPE_CHECKING, Union
from discord import Guild
from typing_extensions import Self
from .context import Context

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""
if TYPE_CHECKING:
    ...
__all__ = ('Parameter', 'parameter', 'param', 'Author', 'CurrentChannel', 'CurrentGuild')
ParamKinds = Union[Literal[inspect.Parameter.POSITIONAL_ONLY], Literal[inspect.Parameter.POSITIONAL_OR_KEYWORD], Literal[inspect.Parameter.VAR_POSITIONAL], Literal[inspect.Parameter.KEYWORD_ONLY], Literal[inspect.Parameter.VAR_KEYWORD],]
empty: Any = ...
class Parameter(inspect.Parameter):
    r"""A class that stores information on a :class:`Command`\'s parameter.

    This is a subclass of :class:`inspect.Parameter`.

    .. versionadded:: 2.0
    """
    __slots__ = ...
    def __init__(self, name: str, kind: ParamKinds, default: Any = ..., annotation: Any = ..., displayed_default: str = ...) -> None:
        ...
    
    def replace(self, *, name: str = ..., kind: ParamKinds = ..., default: Any = ..., annotation: Any = ..., displayed_default: Any = ...) -> Self:
        ...
    
    if notTYPE_CHECKING:
        ...
    @property
    def required(self) -> bool:
        """:class:`bool`: Whether this parameter is required."""
        ...
    
    @property
    def converter(self) -> Any:
        """The converter that should be used for this parameter."""
        ...
    
    @property
    def displayed_default(self) -> Optional[str]:
        """Optional[:class:`str`]: The displayed default in :class:`Command.signature`."""
        ...
    
    async def get_default(self, ctx: Context[Any]) -> Any:
        """|coro|

        Gets this parameter's default value.

        Parameters
        ----------
        ctx: :class:`Context`
            The invocation context that is used to get the default argument.
        """
        ...
    


def parameter(*, converter: Any = ..., default: Any = ..., displayed_default: str = ...) -> Any:
    r"""parameter(\*, converter=..., default=..., displayed_default=...)

    A way to assign custom metadata for a :class:`Command`\'s parameter.

    .. versionadded:: 2.0

    Examples
    --------
    A custom default can be used to have late binding behaviour.

    .. code-block:: python3

        @bot.command()
        async def wave(ctx, to: discord.User = commands.parameter(default=lambda ctx: ctx.author)):
            await ctx.send(f'Hello {to.mention} :wave:')

    Parameters
    ----------
    converter: Any
        The converter to use for this parameter, this replaces the annotation at runtime which is transparent to type checkers.
    default: Any
        The default value for the parameter, if this is a :term:`callable` or a |coroutine_link|_ it is called with a
        positional :class:`Context` argument.
    displayed_default: :class:`str`
        The displayed default in :attr:`Command.signature`.
    """
    ...

class ParameterAlias(Protocol):
    def __call__(self, *, converter: Any = ..., default: Any = ..., displayed_default: str = ...) -> Any:
        ...
    


param: ParameterAlias = ...
Author = ...
CurrentChannel = ...
def default_guild(ctx: Context[Any]) -> Guild:
    ...

CurrentGuild = ...
class Signature(inspect.Signature):
    _parameter_cls = Parameter
    parameters: OrderedDict[str, Parameter]



"""
This type stub file was generated by pyright.
"""

import inspect
from dataclasses import dataclass
from typing import Any, Callable, ClassVar, Coroutine, Dict, List, Optional, TYPE_CHECKING, Tuple, Type, TypeVar, Union
from .models import Choice
from ..enums import AppCommandOptionType, ChannelType
from ..member import Member
from ..interactions import Interaction

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""
__all__ = ('Transformer', 'Transform', 'Range')
T = TypeVar('T')
FuncT = TypeVar('FuncT', bound=Callable[..., Any])
ChoiceT = TypeVar('ChoiceT', str, int, float, Union[str, int, float])
NoneType = ...
if TYPE_CHECKING:
    ...
@dataclass
class CommandParameter:
    """Represents a application command parameter.

    Attributes
    -----------
    name: :class:`str`
        The name of the parameter.
    description: :class:`str`
        The description of the parameter
    required: :class:`bool`
        Whether the parameter is required
    choices: List[:class:`~discord.app_commands.Choice`]
        A list of choices this parameter takes
    type: :class:`~discord.AppCommandOptionType`
        The underlying type of this parameter.
    channel_types: List[:class:`~discord.ChannelType`]
        The channel types that are allowed for this parameter.
    min_value: Optional[Union[:class:`int`, :class:`float`]]
        The minimum supported value for this parameter.
    max_value: Optional[Union[:class:`int`, :class:`float`]]
        The maximum supported value for this parameter.
    """
    name: str = ...
    description: str = ...
    required: bool = ...
    default: Any = ...
    choices: List[Choice[Union[str, int, float]]] = ...
    type: AppCommandOptionType = ...
    channel_types: List[ChannelType] = ...
    min_value: Optional[Union[int, float]] = ...
    max_value: Optional[Union[int, float]] = ...
    autocomplete: Optional[Callable[..., Coroutine[Any, Any, Any]]] = ...
    _rename: str = ...
    _annotation: Any = ...
    def to_dict(self) -> Dict[str, Any]:
        ...
    
    def is_choice_annotation(self) -> bool:
        ...
    
    async def transform(self, interaction: Interaction, value: Any) -> Any:
        ...
    
    @property
    def display_name(self) -> str:
        """:class:`str`: The name of the parameter as it should be displayed to the user."""
        ...
    


class Transformer:
    """The base class that allows a type annotation in an application command parameter
    to map into a :class:`~discord.AppCommandOptionType` and transform the raw value into one
    from this type.

    This class is customisable through the overriding of :func:`classmethod` in the class
    and by using it as the second type parameter of the :class:`~discord.app_commands.Transform`
    class. For example, to convert a string into a custom pair type:

    .. code-block:: python3

        class Point(typing.NamedTuple):
            x: int
            y: int

        class PointTransformer(app_commands.Transformer):
            @classmethod
            async def transform(cls, interaction: discord.Interaction, value: str) -> Point:
                (x, _, y) = value.partition(',')
                return Point(x=int(x.strip()), y=int(y.strip()))

        @app_commands.command()
        async def graph(
            interaction: discord.Interaction,
            point: app_commands.Transform[Point, PointTransformer],
        ):
            await interaction.response.send_message(str(point))

    .. versionadded:: 2.0
    """
    __discord_app_commands_transformer__: ClassVar[bool] = ...
    __discord_app_commands_is_choice__: ClassVar[bool] = ...
    @classmethod
    def type(cls) -> AppCommandOptionType:
        """:class:`~discord.AppCommandOptionType`: The option type associated with this transformer.

        This must be a :obj:`classmethod`.

        Defaults to :attr:`~discord.AppCommandOptionType.string`.
        """
        ...
    
    @classmethod
    def channel_types(cls) -> List[ChannelType]:
        """List[:class:`~discord.ChannelType`]: A list of channel types that are allowed to this parameter.

        Only valid if the :meth:`type` returns :attr:`~discord.AppCommandOptionType.channel`.

        Defaults to an empty list.
        """
        ...
    
    @classmethod
    def min_value(cls) -> Optional[Union[int, float]]:
        """Optional[:class:`int`]: The minimum supported value for this parameter.

        Only valid if the :meth:`type` returns :attr:`~discord.AppCommandOptionType.number` or
        :attr:`~discord.AppCommandOptionType.integer`.

        Defaults to ``None``.
        """
        ...
    
    @classmethod
    def max_value(cls) -> Optional[Union[int, float]]:
        """Optional[:class:`int`]: The maximum supported value for this parameter.

        Only valid if the :meth:`type` returns :attr:`~discord.AppCommandOptionType.number` or
        :attr:`~discord.AppCommandOptionType.integer`.

        Defaults to ``None``.
        """
        ...
    
    @classmethod
    async def transform(cls, interaction: Interaction, value: Any) -> Any:
        """|maybecoro|

        Transforms the converted option value into another value.

        The value passed into this transform function is the same as the
        one in the :class:`conversion table <discord.app_commands.Namespace>`.

        Parameters
        -----------
        interaction: :class:`~discord.Interaction`
            The interaction being handled.
        value: Any
            The value of the given argument after being resolved.
            See the :class:`conversion table <discord.app_commands.Namespace>`
            for how certain option types correspond to certain values.
        """
        ...
    
    @classmethod
    async def autocomplete(cls, interaction: Interaction, value: Union[int, float, str]) -> List[Choice[Union[int, float, str]]]:
        """|coro|

        An autocomplete prompt handler to be automatically used by options using this transformer.

        .. note::

            Autocomplete is only supported for options with a :meth:`~discord.app_commands.Transformer.type`
            of :attr:`~discord.AppCommandOptionType.string`, :attr:`~discord.AppCommandOptionType.integer`,
            or :attr:`~discord.AppCommandOptionType.number`.

        Parameters
        -----------
        interaction: :class:`~discord.Interaction`
            The autocomplete interaction being handled.
        value: Union[:class:`str`, :class:`int`, :class:`float`]
            The current value entered by the user.

        Returns
        --------
        List[:class:`~discord.app_commands.Choice`]
            A list of choices to be displayed to the user, a maximum of 25.

        """
        ...
    


class _TransformMetadata:
    __discord_app_commands_transform__: ClassVar[bool] = ...
    __slots__ = ...
    def __init__(self, metadata: Type[Transformer]) -> None:
        ...
    
    def __call__(self) -> None:
        ...
    


if TYPE_CHECKING:
    ...
else:
    ...
def passthrough_transformer(opt_type: AppCommandOptionType) -> Type[Transformer]:
    class _Generated(Transformer):
        ...
    
    

class MemberTransformer(Transformer):
    @classmethod
    def type(cls) -> AppCommandOptionType:
        ...
    
    @classmethod
    async def transform(cls, interaction: Interaction, value: Any) -> Member:
        ...
    


def channel_transformer(*channel_types: Type[Any], raw: Optional[bool] = ...) -> Type[Transformer]:
    ...

CHANNEL_TO_TYPES: Dict[Any, List[ChannelType]] = ...
BUILT_IN_TRANSFORMERS: Dict[Any, Type[Transformer]] = ...
ALLOWED_DEFAULTS: Dict[AppCommandOptionType, Tuple[Type[Any], ...]] = ...
def get_supported_annotation(annotation: Any, *, _none: type = ..., _mapping: Dict[Any, Type[Transformer]] = ...) -> Tuple[Any, Any]:
    """Returns an appropriate, yet supported, annotation along with an optional default value.

    This differs from the built in mapping by supporting a few more things.
    Likewise, this returns a "transformed" annotation that is ready to use with CommandParameter.transform.
    """
    ...

def annotation_to_parameter(annotation: Any, parameter: inspect.Parameter) -> CommandParameter:
    """Returns the appropriate :class:`CommandParameter` for the given annotation.

    The resulting ``_annotation`` attribute might not match the one given here and might
    be transformed in order to be easier to call from the ``transform`` asynchronous function
    of a command parameter.
    """
    ...


"""
This type stub file was generated by pyright.
"""

import gridfs
from motor.core import AgnosticCursor
from motor.metaprogramming import ReadOnlyProperty, coroutine_annotation

"""GridFS implementation for Motor, an asynchronous driver for MongoDB."""
class AgnosticGridOutCursor(AgnosticCursor):
    __motor_class_name__ = ...
    __delegate_class__ = gridfs.GridOutCursor
    _Cursor__die = ...
    def next_object(self): # -> _ | None:
        """**DEPRECATED** - Get next GridOut object from cursor."""
        ...
    


class MotorGridOutProperty(ReadOnlyProperty):
    """Creates a readonly attribute on the wrapped PyMongo GridOut."""
    def create_attribute(self, cls, attr_name): # -> property:
        ...
    


class AgnosticGridOut:
    """Class to read data out of GridFS.

    MotorGridOut supports the same attributes as PyMongo's
    :class:`~gridfs.grid_file.GridOut`, such as ``_id``, ``content_type``,
    etc.

    You don't need to instantiate this class directly - use the
    methods provided by :class:`~motor.MotorGridFSBucket`. If it **is**
    instantiated directly, call :meth:`open`, :meth:`read`, or
    :meth:`readline` before accessing its attributes.
    """
    __motor_class_name__ = ...
    __delegate_class__ = gridfs.GridOut
    _ensure_file = ...
    _id = ...
    aliases = ...
    chunk_size = ...
    close = ...
    content_type = ...
    filename = ...
    length = ...
    metadata = ...
    name = ...
    read = ...
    readable = ...
    readchunk = ...
    readline = ...
    seek = ...
    seekable = ...
    tell = ...
    upload_date = ...
    write = ...
    def __init__(self, root_collection, file_id=..., file_document=..., delegate=..., session=...) -> None:
        ...
    
    def __aiter__(self): # -> Self@AgnosticGridOut:
        ...
    
    async def __anext__(self):
        ...
    
    def __getattr__(self, item): # -> Any:
        ...
    
    @coroutine_annotation
    def open(self): # -> Any:
        """Retrieve this file's attributes from the server.

        Returns a Future.

        .. versionchanged:: 2.0
           No longer accepts a callback argument.

        .. versionchanged:: 0.2
           :class:`~motor.MotorGridOut` now opens itself on demand, calling
           ``open`` explicitly is rarely needed.
        """
        ...
    
    def get_io_loop(self):
        ...
    
    async def stream_to_handler(self, request_handler): # -> None:
        """Write the contents of this file to a
        :class:`tornado.web.RequestHandler`. This method calls
        :meth:`~tornado.web.RequestHandler.flush` on
        the RequestHandler, so ensure all headers have already been set.
        For a more complete example see the implementation of
        :class:`~motor.web.GridFSHandler`.

        .. code-block:: python

            class FileHandler(tornado.web.RequestHandler):
                @tornado.web.asynchronous
                @gen.coroutine
                def get(self, filename):
                    db = self.settings['db']
                    fs = await motor.MotorGridFSBucket(db())
                    try:
                        gridout = await fs.open_download_stream_by_name(filename)
                    except gridfs.NoFile:
                        raise tornado.web.HTTPError(404)

                    self.set_header("Content-Type", gridout.content_type)
                    self.set_header("Content-Length", gridout.length)
                    await gridout.stream_to_handler(self)
                    self.finish()

        .. seealso:: Tornado `RequestHandler <http://tornadoweb.org/en/stable/web.html#request-handlers>`_
        """
        ...
    


class AgnosticGridIn:
    __motor_class_name__ = ...
    __delegate_class__ = gridfs.GridIn
    __getattr__ = ...
    _id = ...
    abort = ...
    chunk_size = ...
    closed = ...
    close = ...
    content_type = ...
    filename = ...
    length = ...
    name = ...
    read = ...
    readable = ...
    seekable = ...
    upload_date = ...
    write = ...
    writeable = ...
    writelines = ...
    set = ...
    def __init__(self, root_collection, delegate=..., session=..., **kwargs) -> None:
        """
        Class to write data to GridFS. Application developers should not
        generally need to instantiate this class - see
        :meth:`~motor.MotorGridFSBucket.open_upload_stream`.

        Any of the file level options specified in the `GridFS Spec
        <http://dochub.mongodb.org/core/gridfs/>`_ may be passed as
        keyword arguments. Any additional keyword arguments will be
        set as additional fields on the file document. Valid keyword
        arguments include:

          - ``"_id"``: unique ID for this file (default:
            :class:`~bson.objectid.ObjectId`) - this ``"_id"`` must
            not have already been used for another file

          - ``"filename"``: human name for the file

          - ``"contentType"`` or ``"content_type"``: valid mime-type
            for the file

          - ``"chunkSize"`` or ``"chunk_size"``: size of each of the
            chunks, in bytes (default: 256 kb)

          - ``"encoding"``: encoding used for this file. In Python 2,
            any :class:`unicode` that is written to the file will be
            converted to a :class:`str`. In Python 3, any :class:`str`
            that is written to the file will be converted to
            :class:`bytes`.

        :Parameters:
          - `root_collection`: root collection to write to
          - `session` (optional): a
            :class:`~pymongo.client_session.ClientSession` to use for all
            commands
          - `**kwargs` (optional): file level options (see above)

        .. versionchanged:: 3.0
           Removed support for the `disable_md5` parameter (to match the
           GridIn class in PyMongo).
        .. versionchanged:: 0.2
           ``open`` method removed, no longer needed.
        """
        ...
    
    async def __aenter__(self): # -> Self@AgnosticGridIn:
        ...
    
    async def __aexit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    
    def get_io_loop(self):
        ...
    


class AgnosticGridFSBucket:
    __motor_class_name__ = ...
    __delegate_class__ = gridfs.GridFSBucket
    delete = ...
    download_to_stream = ...
    download_to_stream_by_name = ...
    open_download_stream = ...
    open_download_stream_by_name = ...
    open_upload_stream = ...
    open_upload_stream_with_id = ...
    rename = ...
    upload_from_stream = ...
    upload_from_stream_with_id = ...
    def __init__(self, database, bucket_name=..., chunk_size_bytes=..., write_concern=..., read_preference=..., collection=...) -> None:
        """Create a handle to a GridFS bucket.

        Raises :exc:`~pymongo.errors.ConfigurationError` if `write_concern`
        is not acknowledged.

        This class conforms to the `GridFS API Spec
        <https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.rst>`_
        for MongoDB drivers.

        :Parameters:
          - `database`: database to use.
          - `bucket_name` (optional): The name of the bucket. Defaults to 'fs'.
          - `chunk_size_bytes` (optional): The chunk size in bytes. Defaults
            to 255KB.
          - `write_concern` (optional): The
            :class:`~pymongo.write_concern.WriteConcern` to use. If ``None``
            (the default) db.write_concern is used.
          - `read_preference` (optional): The read preference to use. If
            ``None`` (the default) db.read_preference is used.
          - `collection` (optional): Deprecated, an alias for `bucket_name`
            that exists solely to provide backwards compatibility.

        .. versionchanged:: 3.0
           Removed support for the `disable_md5` parameter (to match the
           GridFSBucket class in PyMongo).
        .. versionchanged:: 2.1
           Added support for the `bucket_name`, `chunk_size_bytes`,
           `write_concern`, and `read_preference` parameters.
           Deprecated the `collection` parameter which is now an alias to
           `bucket_name` (to match the GridFSBucket class in PyMongo).
        .. versionadded:: 1.0

        .. mongodoc:: gridfs
        """
        ...
    
    def get_io_loop(self):
        ...
    
    def wrap(self, obj): # -> _ | None:
        ...
    
    def find(self, *args, **kwargs): # -> _:
        """Find and return the files collection documents that match ``filter``.

        Returns a cursor that iterates across files matching
        arbitrary queries on the files collection. Can be combined
        with other modifiers for additional control.

        For example::

          cursor = bucket.find({"filename": "lisa.txt"}, no_cursor_timeout=True)
          while (await cursor.fetch_next):
              grid_out = cursor.next_object()
              data = await grid_out.read()

        This iterates through all versions of "lisa.txt" stored in GridFS.
        Note that setting no_cursor_timeout to True may be important to
        prevent the cursor from timing out during long multi-file processing
        work.

        As another example, the call::

          most_recent_three = fs.find().sort("uploadDate", -1).limit(3)

        would return a cursor to the three most recently uploaded files
        in GridFS.

        Follows a similar interface to
        :meth:`~motor.MotorCollection.find`
        in :class:`~motor.MotorCollection`.

        :Parameters:
          - `filter`: Search query.
          - `batch_size` (optional): The number of documents to return per
            batch.
          - `limit` (optional): The maximum number of documents to return.
          - `no_cursor_timeout` (optional): The server normally times out idle
            cursors after an inactivity period (10 minutes) to prevent excess
            memory use. Set this option to True prevent that.
          - `skip` (optional): The number of documents to skip before
            returning.
          - `sort` (optional): The order by which to sort results. Defaults to
            None.
          - `session` (optional): a
            :class:`~pymongo.client_session.ClientSession`, created with
            :meth:`~MotorClient.start_session`.

        If a :class:`~pymongo.client_session.ClientSession` is passed to
        :meth:`find`, all returned :class:`MotorGridOut` instances
        are associated with that session.

        .. versionchanged:: 1.2
           Added session parameter.
        """
        ...
    


